import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ –∏–ª–∏ London\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "/weather - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    await update.message.reply_text(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–∞—Ä–∏–∂)\n"
        "2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /weather\n\n"
        "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ, –∫–∞–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–ú–æ—Å–∫–≤–∞), "
        "—Ç–∞–∫ –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (Moscow)."
    )


async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É:"
    )


def get_weather_data(city: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏–∑ API"""
    import requests
    try:
        response = requests.get(
            Config.WEATHER_API_URL,
            params={
                'q': city,
                'appid': Config.OPENWEATHER_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Weather API error: {e}")
        return None


def format_weather_message(weather_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    city = weather_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
    temp = weather_data['main']['temp']
    feels_like = weather_data['main']['feels_like']
    description = weather_data['weather'][0]['description'].capitalize()
    humidity = weather_data['main']['humidity']
    wind_speed = weather_data['wind']['speed']

    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
        f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
        f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}\n"
        f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {weather_data['dt']}"
    )


async def handle_city_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    city = update.message.text.strip()

    if len(city) < 2:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await update.message.reply_text(f"üîç –ò—â—É –ø–æ–≥–æ–¥—É –¥–ª—è {city}...")

    weather_data = get_weather_data(city)

    if not weather_data or weather_data.get('cod') != 200:
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –ú–æ—Å–∫–≤–∞, London, Êù±‰∫¨"
        )
        return

    weather_message = format_weather_message(weather_data)
    await update.message.reply_text(weather_message)


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling update:", exc_info=context.error)
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(Config.TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("weather", weather_command))

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_input))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()